{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "RewardSwapContractCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "deployRewardSwap",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardSwapTemplateAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTemplate",
          "type": "address"
        }
      ],
      "name": "setRewardSwapTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingRegistry",
          "type": "address"
        }
      ],
      "name": "setStakingRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "deployRewardSwap(address)": "733fd342",
    "getRewardSwapTemplateAddress()": "bc3ccf6d",
    "getStakingRegistryAddress()": "9f997eb0",
    "setRewardSwapTemplate(address)": "c0f11bf7",
    "setStakingRegistry(address)": "2c740844"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"RewardSwapContractCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"deployRewardSwap\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardSwapTemplateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTemplate\",\"type\":\"address\"}],\"name\":\"setRewardSwapTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingRegistry\",\"type\":\"address\"}],\"name\":\"setStakingRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"charlescrain\",\"kind\":\"dev\",\"methods\":{\"deployRewardSwap(address)\":{\"params\":{\"_stakingAddress\":\"Address of staking contract.\"},\"returns\":{\"_0\":\"address Address of the RewardAccumulator contract.\"}},\"getRewardSwapTemplateAddress()\":{\"returns\":{\"_0\":\"address Address of the template.\"}},\"getStakingRegistryAddress()\":{\"returns\":{\"_0\":\"address Address of the staking registry contract.\"}},\"setRewardSwapTemplate(address)\":{\"params\":{\"_rewardTemplate\":\"Address of the RewardAccumulator template.\"}},\"setStakingRegistry(address)\":{\"params\":{\"_stakingRegistry\":\"Address of the new staking registry contract.\"}}},\"title\":\"IRewardAccumulatorFactory\",\"version\":1},\"userdoc\":{\"events\":{\"RewardSwapContractCreated(address)\":{\"notice\":\"Emitted via {deployRewardSwap} when a new RewardAccumulator contract is deployed.\"}},\"kind\":\"user\",\"methods\":{\"deployRewardSwap(address)\":{\"notice\":\"Deploys a RewardAccumulator contract.\"},\"getRewardSwapTemplateAddress()\":{\"notice\":\"Retrieve the template contract\"},\"getStakingRegistryAddress()\":{\"notice\":\"Retrieve the currently used staking registry address.\"},\"setRewardSwapTemplate(address)\":{\"notice\":\"Set the RewardAccumulator template address to be used.\"},\"setStakingRegistry(address)\":{\"notice\":\"Set the staking registry address field to be used.\"}},\"notice\":\"The RewardAccumulator Factory interface containing all functions, events, etc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/staking/factory/IRewardAccumulatorFactory.sol\":\"IRewardAccumulatorFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/\",\":@manifoldxyz/libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/\",\":@uniswap/v3-core/=lib/v3-core/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":@uniswap/v3-periphery/=lib/v3-periphery/contracts/\",\":arachnid/solidity-stringutils/=lib/solidity-stringutils/\",\":assets/=lib/assets/\",\":aux/=lib/aux/\",\":buffer/=lib/buffer/contracts/\",\":create2-helpers/=lib/royalty-registry-solidity/lib/create2-helpers/\",\":create2-scripts/=lib/royalty-registry-solidity/lib/create2-helpers/script/\",\":ds-test/=lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":ensdomains/ens-contracts/=lib/ensdomains/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":rareprotocol/assets/=lib/assets/src/\",\":rareprotocol/aux/=lib/aux/src/\",\":royalty-guard/=lib/aux/lib/royalty-guard/src/\",\":royalty-registry-solidity/=lib/royalty-registry-solidity/contracts/\",\":royalty-registry/=lib/royalty-registry-solidity/contracts/\",\":solidity-stringutils/=lib/solidity-stringutils/\",\":solmate/=lib/solmate/src/\",\":v3-core/=lib/v3-core/\",\":v3-periphery/=lib/v3-periphery/contracts/\"]},\"sources\":{\"src/staking/factory/IRewardAccumulatorFactory.sol\":{\"keccak256\":\"0x60bf662b2559c105f66e98ee49a0bc313a8339631bd8b38ae1abcbb0193fb7a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://84ec414a304dc9a378bac05327c35e0dc4d7ede9fe1d58c07aabb43c30ea94a0\",\"dweb:/ipfs/QmaXs4PxZQGctSWp3ZKJLjK7HoVxWvxyuDvGQEEDgJnNJH\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_stakingAddress",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RewardSwapContractCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_stakingAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deployRewardSwap",
          "outputs": [
            {
              "internalType": "address payable",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getRewardSwapTemplateAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getStakingRegistryAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_rewardTemplate",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRewardSwapTemplate"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_stakingRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setStakingRegistry"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "deployRewardSwap(address)": {
            "params": {
              "_stakingAddress": "Address of staking contract."
            },
            "returns": {
              "_0": "address Address of the RewardAccumulator contract."
            }
          },
          "getRewardSwapTemplateAddress()": {
            "returns": {
              "_0": "address Address of the template."
            }
          },
          "getStakingRegistryAddress()": {
            "returns": {
              "_0": "address Address of the staking registry contract."
            }
          },
          "setRewardSwapTemplate(address)": {
            "params": {
              "_rewardTemplate": "Address of the RewardAccumulator template."
            }
          },
          "setStakingRegistry(address)": {
            "params": {
              "_stakingRegistry": "Address of the new staking registry contract."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "deployRewardSwap(address)": {
            "notice": "Deploys a RewardAccumulator contract."
          },
          "getRewardSwapTemplateAddress()": {
            "notice": "Retrieve the template contract"
          },
          "getStakingRegistryAddress()": {
            "notice": "Retrieve the currently used staking registry address."
          },
          "setRewardSwapTemplate(address)": {
            "notice": "Set the RewardAccumulator template address to be used."
          },
          "setStakingRegistry(address)": {
            "notice": "Set the staking registry address field to be used."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ensdomains/buffer/=lib/buffer/",
        ":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/",
        ":@manifoldxyz/libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/",
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@openzeppelin/contracts-upgradeable/=lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/contracts/",
        ":@openzeppelin/contracts/=lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/",
        ":@uniswap/v3-core/=lib/v3-core/contracts/",
        ":@uniswap/v3-core/contracts/=lib/v3-core/contracts/",
        ":@uniswap/v3-periphery/=lib/v3-periphery/contracts/",
        ":arachnid/solidity-stringutils/=lib/solidity-stringutils/",
        ":assets/=lib/assets/",
        ":aux/=lib/aux/",
        ":buffer/=lib/buffer/contracts/",
        ":create2-helpers/=lib/royalty-registry-solidity/lib/create2-helpers/",
        ":create2-scripts/=lib/royalty-registry-solidity/lib/create2-helpers/script/",
        ":ds-test/=lib/ds-test/src/",
        ":ens-contracts/=lib/ens-contracts/contracts/",
        ":ensdomains/ens-contracts/=lib/ensdomains/ens-contracts/contracts/",
        ":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/contracts/",
        ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":rareprotocol/assets/=lib/assets/src/",
        ":rareprotocol/aux/=lib/aux/src/",
        ":royalty-guard/=lib/aux/lib/royalty-guard/src/",
        ":royalty-registry-solidity/=lib/royalty-registry-solidity/contracts/",
        ":royalty-registry/=lib/royalty-registry-solidity/contracts/",
        ":solidity-stringutils/=lib/solidity-stringutils/",
        ":solmate/=lib/solmate/src/",
        ":v3-core/=lib/v3-core/",
        ":v3-periphery/=lib/v3-periphery/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/staking/factory/IRewardAccumulatorFactory.sol": "IRewardAccumulatorFactory"
      },
      "libraries": {}
    },
    "sources": {
      "src/staking/factory/IRewardAccumulatorFactory.sol": {
        "keccak256": "0x60bf662b2559c105f66e98ee49a0bc313a8339631bd8b38ae1abcbb0193fb7a3",
        "urls": [
          "bzz-raw://84ec414a304dc9a378bac05327c35e0dc4d7ede9fe1d58c07aabb43c30ea94a0",
          "dweb:/ipfs/QmaXs4PxZQGctSWp3ZKJLjK7HoVxWvxyuDvGQEEDgJnNJH"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/staking/factory/IRewardAccumulatorFactory.sol",
    "id": 46498,
    "exportedSymbols": {
      "IRewardAccumulatorFactory": [
        46497
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2053:108",
    "nodes": [
      {
        "id": 46458,
        "nodeType": "PragmaDirective",
        "src": "32:23:108",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 46497,
        "nodeType": "ContractDefinition",
        "src": "210:1874:108",
        "nodes": [
          {
            "id": 46464,
            "nodeType": "EventDefinition",
            "src": "542:65:108",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 46460,
              "nodeType": "StructuredDocumentation",
              "src": "446:93:108",
              "text": "@notice Emitted via {deployRewardSwap} when a new RewardAccumulator contract is deployed."
            },
            "eventSelector": "46bcaddc4b315eb3afafbc7a854a62d892dcae7b985d18ccca7e1ea6f8ada366",
            "name": "RewardSwapContractCreated",
            "nameLocation": "548:25:108",
            "parameters": {
              "id": 46463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46462,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_stakingAddress",
                  "nameLocation": "590:15:108",
                  "nodeType": "VariableDeclaration",
                  "scope": 46464,
                  "src": "574:31:108",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 46461,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "574:7:108",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "573:33:108"
            }
          },
          {
            "id": 46472,
            "nodeType": "FunctionDefinition",
            "src": "996:86:108",
            "nodes": [],
            "documentation": {
              "id": 46465,
              "nodeType": "StructuredDocumentation",
              "src": "821:172:108",
              "text": "@notice Deploys a RewardAccumulator contract.\n @param _stakingAddress Address of staking contract.\n @return address Address of the RewardAccumulator contract."
            },
            "functionSelector": "733fd342",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deployRewardSwap",
            "nameLocation": "1005:16:108",
            "parameters": {
              "id": 46468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46467,
                  "mutability": "mutable",
                  "name": "_stakingAddress",
                  "nameLocation": "1030:15:108",
                  "nodeType": "VariableDeclaration",
                  "scope": 46472,
                  "src": "1022:23:108",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 46466,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1022:7:108",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1021:25:108"
            },
            "returnParameters": {
              "id": 46471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46470,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 46472,
                  "src": "1065:15:108",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 46469,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1065:15:108",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1064:17:108"
            },
            "scope": 46497,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 46478,
            "nodeType": "FunctionDefinition",
            "src": "1227:63:108",
            "nodes": [],
            "documentation": {
              "id": 46473,
              "nodeType": "StructuredDocumentation",
              "src": "1086:138:108",
              "text": "@notice Set the staking registry address field to be used.\n @param _stakingRegistry Address of the new staking registry contract."
            },
            "functionSelector": "2c740844",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setStakingRegistry",
            "nameLocation": "1236:18:108",
            "parameters": {
              "id": 46476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46475,
                  "mutability": "mutable",
                  "name": "_stakingRegistry",
                  "nameLocation": "1263:16:108",
                  "nodeType": "VariableDeclaration",
                  "scope": 46478,
                  "src": "1255:24:108",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 46474,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1255:7:108",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1254:26:108"
            },
            "returnParameters": {
              "id": 46477,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1289:0:108"
            },
            "scope": 46497,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 46484,
            "nodeType": "FunctionDefinition",
            "src": "1435:65:108",
            "nodes": [],
            "documentation": {
              "id": 46479,
              "nodeType": "StructuredDocumentation",
              "src": "1294:138:108",
              "text": "@notice Set the RewardAccumulator template address to be used.\n @param _rewardTemplate Address of the RewardAccumulator template."
            },
            "functionSelector": "c0f11bf7",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRewardSwapTemplate",
            "nameLocation": "1444:21:108",
            "parameters": {
              "id": 46482,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46481,
                  "mutability": "mutable",
                  "name": "_rewardTemplate",
                  "nameLocation": "1474:15:108",
                  "nodeType": "VariableDeclaration",
                  "scope": 46484,
                  "src": "1466:23:108",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 46480,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1466:7:108",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1465:25:108"
            },
            "returnParameters": {
              "id": 46483,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1499:0:108"
            },
            "scope": 46497,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 46490,
            "nodeType": "FunctionDefinition",
            "src": "1845:69:108",
            "nodes": [],
            "documentation": {
              "id": 46485,
              "nodeType": "StructuredDocumentation",
              "src": "1713:129:108",
              "text": "@notice Retrieve the currently used staking registry address.\n @return address Address of the staking registry contract."
            },
            "functionSelector": "9f997eb0",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getStakingRegistryAddress",
            "nameLocation": "1854:25:108",
            "parameters": {
              "id": 46486,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1879:2:108"
            },
            "returnParameters": {
              "id": 46489,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46488,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 46490,
                  "src": "1905:7:108",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 46487,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1905:7:108",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1904:9:108"
            },
            "scope": 46497,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 46496,
            "nodeType": "FunctionDefinition",
            "src": "2010:72:108",
            "nodes": [],
            "documentation": {
              "id": 46491,
              "nodeType": "StructuredDocumentation",
              "src": "1918:89:108",
              "text": "@notice Retrieve the template contract\n @return address Address of the template."
            },
            "functionSelector": "bc3ccf6d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRewardSwapTemplateAddress",
            "nameLocation": "2019:28:108",
            "parameters": {
              "id": 46492,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2047:2:108"
            },
            "returnParameters": {
              "id": 46495,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46494,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 46496,
                  "src": "2073:7:108",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 46493,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2073:7:108",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2072:9:108"
            },
            "scope": 46497,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IRewardAccumulatorFactory",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 46459,
          "nodeType": "StructuredDocumentation",
          "src": "57:153:108",
          "text": "@author charlescrain\n @title IRewardAccumulatorFactory\n @notice The RewardAccumulator Factory interface containing all functions, events, etc."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          46497
        ],
        "name": "IRewardAccumulatorFactory",
        "nameLocation": "220:25:108",
        "scope": 46498,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 108
}