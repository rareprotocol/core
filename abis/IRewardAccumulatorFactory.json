{
  "abi": [
    {
      "inputs": [],
      "name": "ZeroAddressUnsupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardTemplate",
          "type": "address"
        }
      ],
      "name": "RewardAccumulatorTemplateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "RewardSwapContractCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "deployRewardSwap",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardSwapTemplateAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTemplate",
          "type": "address"
        }
      ],
      "name": "setRewardAccumulatorTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "deployRewardSwap(address)": "733fd342",
    "getRewardSwapTemplateAddress()": "bc3ccf6d",
    "setRewardAccumulatorTemplate(address)": "7bd5029d"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroAddressUnsupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardTemplate\",\"type\":\"address\"}],\"name\":\"RewardAccumulatorTemplateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"RewardSwapContractCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"deployRewardSwap\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardSwapTemplateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTemplate\",\"type\":\"address\"}],\"name\":\"setRewardAccumulatorTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"charlescrain\",\"kind\":\"dev\",\"methods\":{\"deployRewardSwap(address)\":{\"params\":{\"_stakingAddress\":\"Address of staking contract.\"},\"returns\":{\"_0\":\"address Address of the RewardAccumulator contract.\"}},\"getRewardSwapTemplateAddress()\":{\"returns\":{\"_0\":\"address Address of the template.\"}},\"setRewardAccumulatorTemplate(address)\":{\"params\":{\"_rewardTemplate\":\"Address of the RewardAccumulator template.\"}}},\"title\":\"IRewardAccumulatorFactory\",\"version\":1},\"userdoc\":{\"errors\":{\"ZeroAddressUnsupported()\":[{\"notice\":\"Emitted when Zero address provided where it is not allowed.\"}]},\"events\":{\"RewardAccumulatorTemplateUpdated(address)\":{\"notice\":\"Emitted via {setRewardAccumulatorTemplate} when the RewardAccumulatorTemplate is upaded.\"},\"RewardSwapContractCreated(address)\":{\"notice\":\"Emitted via {deployRewardSwap} when a new RewardAccumulator contract is deployed.\"}},\"kind\":\"user\",\"methods\":{\"deployRewardSwap(address)\":{\"notice\":\"Deploys a RewardAccumulator contract.\"},\"getRewardSwapTemplateAddress()\":{\"notice\":\"Retrieve the template contract\"},\"setRewardAccumulatorTemplate(address)\":{\"notice\":\"Set the RewardAccumulator template address to be used.\"}},\"notice\":\"The RewardAccumulator Factory interface containing all functions, events, etc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/staking/factory/IRewardAccumulatorFactory.sol\":\"IRewardAccumulatorFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/\",\":@manifoldxyz/libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/\",\":@uniswap/v3-core/=lib/v3-core/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":@uniswap/v3-periphery/=lib/v3-periphery/contracts/\",\":arachnid/solidity-stringutils/=lib/solidity-stringutils/\",\":assets/=lib/assets/\",\":aux/=lib/aux/\",\":buffer/=lib/buffer/contracts/\",\":create2-helpers/=lib/royalty-registry-solidity/lib/create2-helpers/\",\":create2-scripts/=lib/royalty-registry-solidity/lib/create2-helpers/script/\",\":ds-test/=lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":ensdomains/ens-contracts/=lib/ensdomains/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":rareprotocol/assets/=lib/assets/src/\",\":rareprotocol/aux/=lib/aux/src/\",\":royalty-guard/=lib/aux/lib/royalty-guard/src/\",\":royalty-registry-solidity/=lib/royalty-registry-solidity/contracts/\",\":royalty-registry/=lib/royalty-registry-solidity/contracts/\",\":solidity-stringutils/=lib/solidity-stringutils/\",\":solmate/=lib/solmate/src/\",\":v3-core/=lib/v3-core/\",\":v3-periphery/=lib/v3-periphery/contracts/\"]},\"sources\":{\"src/staking/factory/IRewardAccumulatorFactory.sol\":{\"keccak256\":\"0x587037557e7ec3e0f122938019383e40e482559a81a64d5762e08e88025f2ee6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1630e9e02855e65dfa623615e9c1037a9b7da2775c172002213e51bcfc358a1\",\"dweb:/ipfs/QmSUhBht5eMy8xpUKPYegYggpWRV4mtKoNkuTyiHdgVtZA\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.18+commit.87f61d96"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ZeroAddressUnsupported"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "rewardTemplate",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RewardAccumulatorTemplateUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_stakingAddress",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RewardSwapContractCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_stakingAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deployRewardSwap",
          "outputs": [
            {
              "internalType": "address payable",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getRewardSwapTemplateAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_rewardTemplate",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRewardAccumulatorTemplate"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "deployRewardSwap(address)": {
            "params": {
              "_stakingAddress": "Address of staking contract."
            },
            "returns": {
              "_0": "address Address of the RewardAccumulator contract."
            }
          },
          "getRewardSwapTemplateAddress()": {
            "returns": {
              "_0": "address Address of the template."
            }
          },
          "setRewardAccumulatorTemplate(address)": {
            "params": {
              "_rewardTemplate": "Address of the RewardAccumulator template."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "deployRewardSwap(address)": {
            "notice": "Deploys a RewardAccumulator contract."
          },
          "getRewardSwapTemplateAddress()": {
            "notice": "Retrieve the template contract"
          },
          "setRewardAccumulatorTemplate(address)": {
            "notice": "Set the RewardAccumulator template address to be used."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ensdomains/buffer/=lib/buffer/",
        ":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/",
        ":@manifoldxyz/libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/",
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@openzeppelin/contracts-upgradeable/=lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/contracts/",
        ":@openzeppelin/contracts/=lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/",
        ":@uniswap/v3-core/=lib/v3-core/contracts/",
        ":@uniswap/v3-core/contracts/=lib/v3-core/contracts/",
        ":@uniswap/v3-periphery/=lib/v3-periphery/contracts/",
        ":arachnid/solidity-stringutils/=lib/solidity-stringutils/",
        ":assets/=lib/assets/",
        ":aux/=lib/aux/",
        ":buffer/=lib/buffer/contracts/",
        ":create2-helpers/=lib/royalty-registry-solidity/lib/create2-helpers/",
        ":create2-scripts/=lib/royalty-registry-solidity/lib/create2-helpers/script/",
        ":ds-test/=lib/ds-test/src/",
        ":ens-contracts/=lib/ens-contracts/contracts/",
        ":ensdomains/ens-contracts/=lib/ensdomains/ens-contracts/contracts/",
        ":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/contracts/",
        ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":rareprotocol/assets/=lib/assets/src/",
        ":rareprotocol/aux/=lib/aux/src/",
        ":royalty-guard/=lib/aux/lib/royalty-guard/src/",
        ":royalty-registry-solidity/=lib/royalty-registry-solidity/contracts/",
        ":royalty-registry/=lib/royalty-registry-solidity/contracts/",
        ":solidity-stringutils/=lib/solidity-stringutils/",
        ":solmate/=lib/solmate/src/",
        ":v3-core/=lib/v3-core/",
        ":v3-periphery/=lib/v3-periphery/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/staking/factory/IRewardAccumulatorFactory.sol": "IRewardAccumulatorFactory"
      },
      "libraries": {}
    },
    "sources": {
      "src/staking/factory/IRewardAccumulatorFactory.sol": {
        "keccak256": "0x587037557e7ec3e0f122938019383e40e482559a81a64d5762e08e88025f2ee6",
        "urls": [
          "bzz-raw://c1630e9e02855e65dfa623615e9c1037a9b7da2775c172002213e51bcfc358a1",
          "dweb:/ipfs/QmSUhBht5eMy8xpUKPYegYggpWRV4mtKoNkuTyiHdgVtZA"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/staking/factory/IRewardAccumulatorFactory.sol",
    "id": 54786,
    "exportedSymbols": {
      "IRewardAccumulatorFactory": [
        54785
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2135:137",
    "nodes": [
      {
        "id": 54750,
        "nodeType": "PragmaDirective",
        "src": "32:23:137",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 54785,
        "nodeType": "ContractDefinition",
        "src": "210:1956:137",
        "nodes": [
          {
            "id": 54756,
            "nodeType": "EventDefinition",
            "src": "542:65:137",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 54752,
              "nodeType": "StructuredDocumentation",
              "src": "446:93:137",
              "text": "@notice Emitted via {deployRewardSwap} when a new RewardAccumulator contract is deployed."
            },
            "eventSelector": "46bcaddc4b315eb3afafbc7a854a62d892dcae7b985d18ccca7e1ea6f8ada366",
            "name": "RewardSwapContractCreated",
            "nameLocation": "548:25:137",
            "parameters": {
              "id": 54755,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54754,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_stakingAddress",
                  "nameLocation": "590:15:137",
                  "nodeType": "VariableDeclaration",
                  "scope": 54756,
                  "src": "574:31:137",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 54753,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "574:7:137",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "573:33:137"
            }
          },
          {
            "id": 54761,
            "nodeType": "EventDefinition",
            "src": "714:71:137",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 54757,
              "nodeType": "StructuredDocumentation",
              "src": "611:100:137",
              "text": "@notice Emitted via {setRewardAccumulatorTemplate} when the RewardAccumulatorTemplate is upaded."
            },
            "eventSelector": "f554442e70ba202738fe077c8f4e40b64121198a4aa620c00a9e0853bef257de",
            "name": "RewardAccumulatorTemplateUpdated",
            "nameLocation": "720:32:137",
            "parameters": {
              "id": 54760,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54759,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "rewardTemplate",
                  "nameLocation": "769:14:137",
                  "nodeType": "VariableDeclaration",
                  "scope": 54761,
                  "src": "753:30:137",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 54758,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "753:7:137",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "752:32:137"
            }
          },
          {
            "id": 54764,
            "nodeType": "ErrorDefinition",
            "src": "1064:31:137",
            "nodes": [],
            "documentation": {
              "id": 54762,
              "nodeType": "StructuredDocumentation",
              "src": "990:71:137",
              "text": "@notice Emitted when Zero address provided where it is not allowed."
            },
            "errorSelector": "78279125",
            "name": "ZeroAddressUnsupported",
            "nameLocation": "1070:22:137",
            "parameters": {
              "id": 54763,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1092:2:137"
            }
          },
          {
            "id": 54772,
            "nodeType": "FunctionDefinition",
            "src": "1484:86:137",
            "nodes": [],
            "documentation": {
              "id": 54765,
              "nodeType": "StructuredDocumentation",
              "src": "1309:172:137",
              "text": "@notice Deploys a RewardAccumulator contract.\n @param _stakingAddress Address of staking contract.\n @return address Address of the RewardAccumulator contract."
            },
            "functionSelector": "733fd342",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deployRewardSwap",
            "nameLocation": "1493:16:137",
            "parameters": {
              "id": 54768,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54767,
                  "mutability": "mutable",
                  "name": "_stakingAddress",
                  "nameLocation": "1518:15:137",
                  "nodeType": "VariableDeclaration",
                  "scope": 54772,
                  "src": "1510:23:137",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 54766,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1510:7:137",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1509:25:137"
            },
            "returnParameters": {
              "id": 54771,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54770,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 54772,
                  "src": "1553:15:137",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 54769,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1553:15:137",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1552:17:137"
            },
            "scope": 54785,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 54778,
            "nodeType": "FunctionDefinition",
            "src": "1715:72:137",
            "nodes": [],
            "documentation": {
              "id": 54773,
              "nodeType": "StructuredDocumentation",
              "src": "1574:138:137",
              "text": "@notice Set the RewardAccumulator template address to be used.\n @param _rewardTemplate Address of the RewardAccumulator template."
            },
            "functionSelector": "7bd5029d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRewardAccumulatorTemplate",
            "nameLocation": "1724:28:137",
            "parameters": {
              "id": 54776,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54775,
                  "mutability": "mutable",
                  "name": "_rewardTemplate",
                  "nameLocation": "1761:15:137",
                  "nodeType": "VariableDeclaration",
                  "scope": 54778,
                  "src": "1753:23:137",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 54774,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1753:7:137",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1752:25:137"
            },
            "returnParameters": {
              "id": 54777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1786:0:137"
            },
            "scope": 54785,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 54784,
            "nodeType": "FunctionDefinition",
            "src": "2092:72:137",
            "nodes": [],
            "documentation": {
              "id": 54779,
              "nodeType": "StructuredDocumentation",
              "src": "2000:89:137",
              "text": "@notice Retrieve the template contract\n @return address Address of the template."
            },
            "functionSelector": "bc3ccf6d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRewardSwapTemplateAddress",
            "nameLocation": "2101:28:137",
            "parameters": {
              "id": 54780,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2129:2:137"
            },
            "returnParameters": {
              "id": 54783,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 54782,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 54784,
                  "src": "2155:7:137",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 54781,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2155:7:137",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2154:9:137"
            },
            "scope": 54785,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IRewardAccumulatorFactory",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 54751,
          "nodeType": "StructuredDocumentation",
          "src": "57:153:137",
          "text": "@author charlescrain\n @title IRewardAccumulatorFactory\n @notice The RewardAccumulator Factory interface containing all functions, events, etc."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          54785
        ],
        "name": "IRewardAccumulatorFactory",
        "nameLocation": "220:25:137",
        "scope": 54786,
        "usedErrors": [
          54764
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 137
}