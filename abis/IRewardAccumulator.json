{
  "abi": [
    {
      "inputs": [],
      "name": "CannotSwapRareForRare",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RarePriceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedERC20Token",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_msgSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rareIn",
          "type": "uint256"
        }
      ],
      "name": "RewardAccumulator",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_rareAmountIn",
          "type": "uint128"
        }
      ],
      "name": "estimateRarePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingPool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_rareIn",
          "type": "uint128"
        }
      ],
      "name": "rewardSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "estimateRarePrice(address,uint128)": "442471f0",
    "initialize(address,address)": "485cc955",
    "rewardSwap(address,uint256,uint128)": "94a5a29d"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotSwapRareForRare\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RarePriceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedERC20Token\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rareIn\",\"type\":\"uint256\"}],\"name\":\"RewardAccumulator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_rareAmountIn\",\"type\":\"uint128\"}],\"name\":\"estimateRarePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_rareIn\",\"type\":\"uint128\"}],\"name\":\"rewardSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"charlescrain\",\"kind\":\"dev\",\"methods\":{\"estimateRarePrice(address,uint128)\":{\"params\":{\"_rareAmountIn\":\"uint128 amount of RARE to trade for the _tokenOut.\",\"_tokenOut\":\"Address of the ERC20 token to be swapped for.\"},\"returns\":{\"_0\":\"uint256 amount of _tokenOut for the _rareAmountIn.\"}},\"rewardSwap(address,uint256,uint128)\":{\"params\":{\"_minAmountOut\":\"Min amount one is willing to receive for the _rareIn.\",\"_rareIn\":\"The amount of RARE one is looking to trade.\",\"_tokenOut\":\"Address of the ERC20 to pay out with. If null address, then uses ETH.\"}}},\"title\":\"IRewardAccumulator\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotSwapRareForRare()\":[{\"notice\":\"Error emitted via {rewardSwap} if _tokenOut is the $RARE address.\"}],\"InsufficientFunds()\":[{\"notice\":\"Error emitted via {rewardSwap} if reward swap doesn't have enough funds to perform the swap.\"}],\"RarePriceTooLow()\":[{\"notice\":\"Error emitted via {rewardSwap} if the rare price is too low to handle the _minAmountOut requirement.\"}],\"Unauthorized()\":[{\"notice\":\"Error emitted when user doesnt meet the criteria for call.\"}],\"UnsupportedERC20Token()\":[{\"notice\":\"Emitted when an unsupported ERC20 token for reward swapping.\"}]},\"kind\":\"user\",\"methods\":{\"estimateRarePrice(address,uint128)\":{\"notice\":\"Estimate the discounted $RARE price for a given token.\"},\"rewardSwap(address,uint256,uint128)\":{\"notice\":\"Swap RARE for a discounted price on tokens stored\"}},\"notice\":\"The reward accumulator interface containing all functions, events, etc. for accumulating and swapping rewards.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/staking/reward/IRewardAccumulator.sol\":\"IRewardAccumulator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/\",\":@manifoldxyz/libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/\",\":@uniswap/v3-core/=lib/v3-core/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":@uniswap/v3-periphery/=lib/v3-periphery/contracts/\",\":arachnid/solidity-stringutils/=lib/solidity-stringutils/\",\":assets/=lib/assets/\",\":aux/=lib/aux/\",\":buffer/=lib/buffer/contracts/\",\":create2-helpers/=lib/royalty-registry-solidity/lib/create2-helpers/\",\":create2-scripts/=lib/royalty-registry-solidity/lib/create2-helpers/script/\",\":ds-test/=lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":ensdomains/ens-contracts/=lib/ensdomains/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":rareprotocol/assets/=lib/assets/src/\",\":rareprotocol/aux/=lib/aux/src/\",\":royalty-guard/=lib/aux/lib/royalty-guard/src/\",\":royalty-registry-solidity/=lib/royalty-registry-solidity/contracts/\",\":royalty-registry/=lib/royalty-registry-solidity/contracts/\",\":solidity-stringutils/=lib/solidity-stringutils/\",\":solmate/=lib/solmate/src/\",\":v3-core/=lib/v3-core/\",\":v3-periphery/=lib/v3-periphery/contracts/\"]},\"sources\":{\"src/staking/reward/IRewardAccumulator.sol\":{\"keccak256\":\"0x7f259a7d117d4657620a7302d7269a4083093ce81f15863804a9c12b84211d26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be2527ac82814e132ce20dd66c7573be5e57a6e58a446679d67ff933c5653820\",\"dweb:/ipfs/QmcUNbMvyvj59weD6qcw5kX74uHTUectiGJv6AjfbvbRwq\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "CannotSwapRareForRare"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientFunds"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RarePriceTooLow"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Unauthorized"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnsupportedERC20Token"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_msgSender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_amountOut",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_rareIn",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RewardAccumulator",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_rareAmountIn",
              "type": "uint128"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "estimateRarePrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_stakingRegistry",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_stakingPool",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_minAmountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "_rareIn",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "rewardSwap"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "estimateRarePrice(address,uint128)": {
            "params": {
              "_rareAmountIn": "uint128 amount of RARE to trade for the _tokenOut.",
              "_tokenOut": "Address of the ERC20 token to be swapped for."
            },
            "returns": {
              "_0": "uint256 amount of _tokenOut for the _rareAmountIn."
            }
          },
          "rewardSwap(address,uint256,uint128)": {
            "params": {
              "_minAmountOut": "Min amount one is willing to receive for the _rareIn.",
              "_rareIn": "The amount of RARE one is looking to trade.",
              "_tokenOut": "Address of the ERC20 to pay out with. If null address, then uses ETH."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "estimateRarePrice(address,uint128)": {
            "notice": "Estimate the discounted $RARE price for a given token."
          },
          "rewardSwap(address,uint256,uint128)": {
            "notice": "Swap RARE for a discounted price on tokens stored"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ensdomains/buffer/=lib/buffer/",
        ":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/",
        ":@manifoldxyz/libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/",
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@openzeppelin/contracts-upgradeable/=lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/contracts/",
        ":@openzeppelin/contracts/=lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/",
        ":@uniswap/v3-core/=lib/v3-core/contracts/",
        ":@uniswap/v3-core/contracts/=lib/v3-core/contracts/",
        ":@uniswap/v3-periphery/=lib/v3-periphery/contracts/",
        ":arachnid/solidity-stringutils/=lib/solidity-stringutils/",
        ":assets/=lib/assets/",
        ":aux/=lib/aux/",
        ":buffer/=lib/buffer/contracts/",
        ":create2-helpers/=lib/royalty-registry-solidity/lib/create2-helpers/",
        ":create2-scripts/=lib/royalty-registry-solidity/lib/create2-helpers/script/",
        ":ds-test/=lib/ds-test/src/",
        ":ens-contracts/=lib/ens-contracts/contracts/",
        ":ensdomains/ens-contracts/=lib/ensdomains/ens-contracts/contracts/",
        ":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":libraries-solidity/=lib/royalty-registry-solidity/lib/libraries-solidity/contracts/",
        ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":rareprotocol/assets/=lib/assets/src/",
        ":rareprotocol/aux/=lib/aux/src/",
        ":royalty-guard/=lib/aux/lib/royalty-guard/src/",
        ":royalty-registry-solidity/=lib/royalty-registry-solidity/contracts/",
        ":royalty-registry/=lib/royalty-registry-solidity/contracts/",
        ":solidity-stringutils/=lib/solidity-stringutils/",
        ":solmate/=lib/solmate/src/",
        ":v3-core/=lib/v3-core/",
        ":v3-periphery/=lib/v3-periphery/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/staking/reward/IRewardAccumulator.sol": "IRewardAccumulator"
      },
      "libraries": {}
    },
    "sources": {
      "src/staking/reward/IRewardAccumulator.sol": {
        "keccak256": "0x7f259a7d117d4657620a7302d7269a4083093ce81f15863804a9c12b84211d26",
        "urls": [
          "bzz-raw://be2527ac82814e132ce20dd66c7573be5e57a6e58a446679d67ff933c5653820",
          "dweb:/ipfs/QmcUNbMvyvj59weD6qcw5kX74uHTUectiGJv6AjfbvbRwq"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/staking/reward/IRewardAccumulator.sol",
    "id": 48907,
    "exportedSymbols": {
      "IRewardAccumulator": [
        48906
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2850:113",
    "nodes": [
      {
        "id": 48852,
        "nodeType": "PragmaDirective",
        "src": "32:23:113",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 48906,
        "nodeType": "ContractDefinition",
        "src": "235:2646:113",
        "nodes": [
          {
            "id": 48863,
            "nodeType": "EventDefinition",
            "src": "464:116:113",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "fde313859edf8a78b1e1c10c6dbe0584a219be6af8d4914fdb85486523103397",
            "name": "RewardAccumulator",
            "nameLocation": "470:17:113",
            "parameters": {
              "id": 48862,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48855,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_msgSender",
                  "nameLocation": "504:10:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48863,
                  "src": "488:26:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48854,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "488:7:113",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48857,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_tokenOut",
                  "nameLocation": "532:9:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48863,
                  "src": "516:25:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48856,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "516:7:113",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48859,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_amountOut",
                  "nameLocation": "551:10:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48863,
                  "src": "543:18:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 48858,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "543:7:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48861,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_rareIn",
                  "nameLocation": "571:7:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48863,
                  "src": "563:15:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 48860,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "563:7:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "487:92:113"
            }
          },
          {
            "id": 48866,
            "nodeType": "ErrorDefinition",
            "src": "858:21:113",
            "nodes": [],
            "documentation": {
              "id": 48864,
              "nodeType": "StructuredDocumentation",
              "src": "785:70:113",
              "text": "@notice Error emitted when user doesnt meet the criteria for call."
            },
            "errorSelector": "82b42900",
            "name": "Unauthorized",
            "nameLocation": "864:12:113",
            "parameters": {
              "id": 48865,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "876:2:113"
            }
          },
          {
            "id": 48869,
            "nodeType": "ErrorDefinition",
            "src": "990:26:113",
            "nodes": [],
            "documentation": {
              "id": 48867,
              "nodeType": "StructuredDocumentation",
              "src": "883:104:113",
              "text": "@notice Error emitted via {rewardSwap} if reward swap doesn't have enough funds to perform the swap."
            },
            "errorSelector": "356680b7",
            "name": "InsufficientFunds",
            "nameLocation": "996:17:113",
            "parameters": {
              "id": 48868,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1013:2:113"
            }
          },
          {
            "id": 48872,
            "nodeType": "ErrorDefinition",
            "src": "1135:24:113",
            "nodes": [],
            "documentation": {
              "id": 48870,
              "nodeType": "StructuredDocumentation",
              "src": "1020:112:113",
              "text": "@notice Error emitted via {rewardSwap} if the rare price is too low to handle the _minAmountOut requirement."
            },
            "errorSelector": "90981e6d",
            "name": "RarePriceTooLow",
            "nameLocation": "1141:15:113",
            "parameters": {
              "id": 48871,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1156:2:113"
            }
          },
          {
            "id": 48875,
            "nodeType": "ErrorDefinition",
            "src": "1243:30:113",
            "nodes": [],
            "documentation": {
              "id": 48873,
              "nodeType": "StructuredDocumentation",
              "src": "1163:77:113",
              "text": "@notice Error emitted via {rewardSwap} if _tokenOut is the $RARE address."
            },
            "errorSelector": "337b3924",
            "name": "CannotSwapRareForRare",
            "nameLocation": "1249:21:113",
            "parameters": {
              "id": 48874,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1270:2:113"
            }
          },
          {
            "id": 48878,
            "nodeType": "ErrorDefinition",
            "src": "1352:30:113",
            "nodes": [],
            "documentation": {
              "id": 48876,
              "nodeType": "StructuredDocumentation",
              "src": "1277:72:113",
              "text": "@notice Emitted when an unsupported ERC20 token for reward swapping."
            },
            "errorSelector": "2eb084d8",
            "name": "UnsupportedERC20Token",
            "nameLocation": "1358:21:113",
            "parameters": {
              "id": 48877,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1379:2:113"
            }
          },
          {
            "id": 48885,
            "nodeType": "FunctionDefinition",
            "src": "1586:77:113",
            "nodes": [],
            "functionSelector": "485cc955",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "1595:10:113",
            "parameters": {
              "id": 48883,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48880,
                  "mutability": "mutable",
                  "name": "_stakingRegistry",
                  "nameLocation": "1614:16:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48885,
                  "src": "1606:24:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48879,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1606:7:113",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48882,
                  "mutability": "mutable",
                  "name": "_stakingPool",
                  "nameLocation": "1640:12:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48885,
                  "src": "1632:20:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48881,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1632:7:113",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1605:48:113"
            },
            "returnParameters": {
              "id": 48884,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1662:0:113"
            },
            "scope": 48906,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 48895,
            "nodeType": "FunctionDefinition",
            "src": "2180:104:113",
            "nodes": [],
            "documentation": {
              "id": 48886,
              "nodeType": "StructuredDocumentation",
              "src": "1877:300:113",
              "text": "@notice Swap RARE for a discounted price on tokens stored\n @param _tokenOut Address of the ERC20 to pay out with. If null address, then uses ETH.\n @param _minAmountOut Min amount one is willing to receive for the _rareIn.\n @param _rareIn The amount of RARE one is looking to trade."
            },
            "functionSelector": "94a5a29d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "rewardSwap",
            "nameLocation": "2189:10:113",
            "parameters": {
              "id": 48893,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48888,
                  "mutability": "mutable",
                  "name": "_tokenOut",
                  "nameLocation": "2213:9:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48895,
                  "src": "2205:17:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48887,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2205:7:113",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48890,
                  "mutability": "mutable",
                  "name": "_minAmountOut",
                  "nameLocation": "2236:13:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48895,
                  "src": "2228:21:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 48889,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2228:7:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48892,
                  "mutability": "mutable",
                  "name": "_rareIn",
                  "nameLocation": "2263:7:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48895,
                  "src": "2255:15:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 48891,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2255:7:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2199:75:113"
            },
            "returnParameters": {
              "id": 48894,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2283:0:113"
            },
            "scope": 48906,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 48905,
            "nodeType": "FunctionDefinition",
            "src": "2778:101:113",
            "nodes": [],
            "documentation": {
              "id": 48896,
              "nodeType": "StructuredDocumentation",
              "src": "2497:278:113",
              "text": "@notice Estimate the discounted $RARE price for a given token.\n @param _tokenOut Address of the ERC20 token to be swapped for.\n @param _rareAmountIn uint128 amount of RARE to trade for the _tokenOut.\n @return uint256 amount of _tokenOut for the _rareAmountIn."
            },
            "functionSelector": "442471f0",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "estimateRarePrice",
            "nameLocation": "2787:17:113",
            "parameters": {
              "id": 48901,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48898,
                  "mutability": "mutable",
                  "name": "_tokenOut",
                  "nameLocation": "2813:9:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48905,
                  "src": "2805:17:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48897,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2805:7:113",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48900,
                  "mutability": "mutable",
                  "name": "_rareAmountIn",
                  "nameLocation": "2832:13:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 48905,
                  "src": "2824:21:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 48899,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2824:7:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2804:42:113"
            },
            "returnParameters": {
              "id": 48904,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48903,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48905,
                  "src": "2870:7:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 48902,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2870:7:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2869:9:113"
            },
            "scope": 48906,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IRewardAccumulator",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 48853,
          "nodeType": "StructuredDocumentation",
          "src": "57:178:113",
          "text": "@author charlescrain\n @title IRewardAccumulator\n @notice The reward accumulator interface containing all functions, events, etc. for accumulating and swapping rewards."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          48906
        ],
        "name": "IRewardAccumulator",
        "nameLocation": "245:18:113",
        "scope": 48907,
        "usedErrors": [
          48866,
          48869,
          48872,
          48875,
          48878
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 113
}